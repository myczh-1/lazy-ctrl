syntax = "proto3";

package controller;

option go_package = "github.com/myczh-1/lazy-ctrl-agent/proto";

// 控制器服务定义
service ControllerService {
  // 执行命令
  rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse);
  
  // 获取可用命令列表
  rpc ListCommands(ListCommandsRequest) returns (ListCommandsResponse);
  
  // 重新加载配置
  rpc ReloadConfig(ReloadConfigRequest) returns (ReloadConfigResponse);
  
  // 健康检查
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // PIN验证
  rpc VerifyPin(VerifyPinRequest) returns (VerifyPinResponse);
  
  // 获取版本信息
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  
  // 获取系统状态
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

// 执行命令请求
message ExecuteCommandRequest {
  string command_id = 1;        // 命令ID
  repeated string args = 2;     // 命令参数
  int32 timeout_seconds = 3;    // 超时时间(秒)，0表示使用默认超时
}

// 执行命令响应
message ExecuteCommandResponse {
  bool success = 1;            // 执行是否成功
  string output = 2;           // 命令输出
  string error = 3;            // 错误信息
  int32 exit_code = 4;         // 退出码
  int64 execution_time_ms = 5; // 执行时间(毫秒)
}

// 获取命令列表请求
message ListCommandsRequest {
  // 暂时无参数，预留扩展
}

// 命令信息
message CommandInfo {
  string id = 1;               // 命令ID
  string description = 2;      // 命令描述
  bool platform_supported = 3; // 当前平台是否支持
  string platform_command = 4; // 当前平台的实际命令
}

// 获取命令列表响应
message ListCommandsResponse {
  repeated CommandInfo commands = 1;
}

// 重新加载配置请求
message ReloadConfigRequest {
  // 暂时无参数
}

// 重新加载配置响应
message ReloadConfigResponse {
  bool success = 1;
  string message = 2;
  int32 commands_loaded = 3;   // 加载的命令数量
}

// 健康检查请求
message HealthCheckRequest {
  // 暂时无参数
}

// 健康检查响应
message HealthCheckResponse {
  string status = 1;           // 状态: "SERVING", "NOT_SERVING"
  string version = 2;          // 版本信息
  int64 uptime_seconds = 3;    // 运行时间(秒)
}

// PIN验证请求
message VerifyPinRequest {
  string pin = 1;              // PIN码
}

// PIN验证响应
message VerifyPinResponse {
  bool success = 1;            // 验证是否成功
  string message = 2;          // 响应消息
  bool valid = 3;              // PIN是否有效
}

// 获取版本信息请求
message GetVersionRequest {
  // 暂时无参数
}

// 获取版本信息响应
message GetVersionResponse {
  bool success = 1;            // 请求是否成功
  string message = 2;          // 响应消息
  string version = 3;          // 版本号
  string build_time = 4;       // 构建时间
  string commit_hash = 5;      // Git提交哈希
  string go_version = 6;       // Go版本
  string platform = 7;        // 平台信息
  string api_version = 8;      // API版本
}

// 获取系统状态请求
message GetStatusRequest {
  // 暂时无参数
}

// 获取系统状态响应
message GetStatusResponse {
  bool success = 1;            // 请求是否成功
  string message = 2;          // 响应消息
  bool online = 3;             // 是否在线
  int64 uptime_seconds = 4;    // 运行时间(秒)
  double cpu_usage = 5;        // CPU使用率
  double memory_usage = 6;     // 内存使用率
  double disk_usage = 7;       // 磁盘使用率
  map<string, string> system_info = 8;      // 系统信息
  map<string, string> service_status = 9;   // 服务状态
  int64 last_seen = 10;        // 最后活跃时间戳
}